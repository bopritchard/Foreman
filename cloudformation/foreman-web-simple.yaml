AWSTemplateFormatVersion: '2010-09-09'
Description: 'Foreman - Simple Web Interface Deployment'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
  
  ProjectName:
    Type: String
    Default: foreman
    Description: Project name for resource naming

Resources:
  # Lambda Function for API Gateway
  WebApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-web-api'
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          
          s3 = boto3.client('s3')
          
          def lambda_handler(event, context):
              try:
                  # Parse the request
                  http_method = event.get('httpMethod', 'GET')
                  path = event.get('path', '/')
                  
                  if http_method == 'GET' and path == '/':
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'text/html',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': get_html_content()
                      }
                  elif http_method == 'POST':
                      # Check if it's a status check request
                      if event.get('path') == '/check-status' or event.get('queryStringParameters', {}).get('action') == 'check-status':
                          return handle_status_check(event)
                      else:
                          return handle_upload(event)
                  else:
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'Not found'})
                      }
                      
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
          
          def get_html_content():
              return '''
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Foreman - CSV Upload</title>
                  <style>
                      body {
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                          max-width: 800px;
                          margin: 0 auto;
                          padding: 20px;
                          background-color: #f5f5f5;
                      }
                      .container {
                          background: white;
                          padding: 30px;
                          border-radius: 10px;
                          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      }
                      h1 {
                          color: #333;
                          text-align: center;
                          margin-bottom: 30px;
                      }
                      .upload-form {
                          border: 2px dashed #ddd;
                          padding: 40px;
                          text-align: center;
                          border-radius: 10px;
                          margin: 20px 0;
                          transition: border-color 0.3s;
                      }
                      .upload-form:hover {
                          border-color: #007bff;
                      }
                      .file-input {
                          margin: 20px 0;
                      }
                      .submit-btn {
                          background: #007bff;
                          color: white;
                          border: none;
                          padding: 12px 30px;
                          border-radius: 5px;
                          cursor: pointer;
                          font-size: 16px;
                      }
                      .submit-btn:hover {
                          background: #0056b3;
                      }
                      .alert {
                          padding: 15px;
                          margin: 20px 0;
                          border-radius: 5px;
                      }
                      .alert-success {
                          background: #d4edda;
                          color: #155724;
                          border: 1px solid #c3e6cb;
                      }
                      .alert-error {
                          background: #f8d7da;
                          color: #721c24;
                          border: 1px solid #f5c6cb;
                      }
                      .info {
                          background: #d1ecf1;
                          color: #0c5460;
                          border: 1px solid #bee5eb;
                          padding: 15px;
                          border-radius: 5px;
                          margin: 20px 0;
                      }
                      .status {
                          margin-top: 30px;
                          padding: 20px;
                          background: #f8f9fa;
                          border-radius: 5px;
                      }
                      .results {
                          margin-top: 30px;
                          padding: 20px;
                          background: #e8f5e8;
                          border-radius: 5px;
                          border: 1px solid #c3e6cb;
                      }
                      .result-summary {
                          background: white;
                          padding: 15px;
                          border-radius: 5px;
                          margin-bottom: 15px;
                      }
                      .error-details {
                          background: #f8d7da;
                          padding: 15px;
                          border-radius: 5px;
                          border: 1px solid #f5c6cb;
                      }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <h1>üõ†Ô∏è Foreman CSV Upload</h1>
                      
                      <div id="messages"></div>
                      
                      <div class="info">
                          <h3>üìã How it works:</h3>
                          <ol>
                              <li>Upload your CSV file using the form below</li>
                              <li>File is automatically uploaded to S3</li>
                              <li>S3 triggers Lambda function for processing</li>
                              <li>Data is validated and submitted to GraphQL API</li>
                              <li>Results are stored in DynamoDB</li>
                          </ol>
                      </div>
                      
                      <form id="uploadForm" class="upload-form">
                          <h3>üì§ Upload CSV File</h3>
                          <p>Select a CSV file to upload and process:</p>
                          
                          <div class="file-input">
                              <input type="file" name="file" accept=".csv" required>
                          </div>
                          
                          <button type="submit" class="submit-btn">üöÄ Upload & Process</button>
                      </form>
                      
                      <div class="status">
                          <h3>üìä Processing Status</h3>
                          <p><strong>S3 Bucket:</strong> foreman-dev-csv-uploads</p>
                          <p><strong>Region:</strong> us-east-1</p>
                          <p><strong>Auto-detection:</strong> Customer, Project, and other models</p>
                      </div>
                      
                      <div id="results" class="results" style="display: none;">
                          <h3>üìà Upload Results</h3>
                          <div id="resultsContent"></div>
                      </div>
                  </div>
                  
                  <script>
                      let currentUpload = null;
                      
                      document.getElementById('uploadForm').addEventListener('submit', async function(e) {
                          e.preventDefault();
                          
                          const formData = new FormData();
                          const fileInput = document.querySelector('input[type="file"]');
                          formData.append('file', fileInput.files[0]);
                          
                          try {
                              const response = await fetch(window.location.href, {
                                  method: 'POST',
                                  body: formData
                              });
                              
                              const result = await response.json();
                              
                              if (response.ok) {
                                  showMessage('‚úÖ ' + result.message, 'success');
                                  
                                  // Start polling for results
                                  if (result.s3_key) {
                                      currentUpload = {
                                          s3_key: result.s3_key,
                                          timestamp: result.timestamp
                                      };
                                      startPolling();
                                  }
                              } else {
                                  showMessage('‚ùå ' + result.error, 'error');
                              }
                          } catch (error) {
                              showMessage('‚ùå Upload failed: ' + error.message, 'error');
                          }
                      });
                      
                      function showMessage(message, type) {
                          const messagesDiv = document.getElementById('messages');
                          const alertDiv = document.createElement('div');
                          alertDiv.className = `alert alert-${type}`;
                          alertDiv.textContent = message;
                          messagesDiv.appendChild(alertDiv);
                          
                          setTimeout(() => {
                              alertDiv.remove();
                          }, 5000);
                      }
                      
                      function startPolling() {
                          if (!currentUpload) return;
                          
                          const resultsDiv = document.getElementById('results');
                          const resultsContent = document.getElementById('resultsContent');
                          
                          resultsDiv.style.display = 'block';
                          resultsContent.innerHTML = '<p>üîÑ Checking processing status...</p>';
                          
                          // Poll every 3 seconds for up to 60 seconds
                          let attempts = 0;
                          const maxAttempts = 20;
                          
                          const pollInterval = setInterval(async () => {
                              attempts++;
                              
                              try {
                                  // Check S3 for processed file
                                  const response = await fetch('?action=check-status', {
                                      method: 'POST',
                                      headers: {
                                          'Content-Type': 'application/json'
                                      },
                                      body: JSON.stringify({
                                          s3_key: currentUpload.s3_key,
                                          timestamp: currentUpload.timestamp
                                      })
                                  });
                                  
                                  if (response.ok) {
                                      const status = await response.json();
                                      if (status.processed) {
                                          clearInterval(pollInterval);
                                          showResults(status);
                                          return;
                                      }
                                  }
                                  
                                  if (attempts >= maxAttempts) {
                                      clearInterval(pollInterval);
                                      resultsContent.innerHTML = `
                                          <p>‚è∞ Processing timeout (60 seconds).</p>
                                          <p><strong>What to check:</strong></p>
                                          <ul>
                                              <li>S3 bucket: <code>foreman-dev-csv-uploads</code></li>
                                              <li>Look for your file in <code>processed/</code> folder</li>
                                              <li>Check DynamoDB table: <code>foreman-dev-customers</code></li>
                                          </ul>
                                          <p><em>Processing may still be running in the background.</em></p>
                                      `;
                                  }
                              } catch (error) {
                                  console.error('Polling error:', error);
                                  if (attempts >= maxAttempts) {
                                      clearInterval(pollInterval);
                                      resultsContent.innerHTML = '<p>‚ùå Error checking status. Check S3 bucket manually.</p>';
                                  }
                              }
                          }, 3000);
                      }
                      
                      function showResults(status) {
                          const resultsContent = document.getElementById('resultsContent');
                          
                          let html = `
                              <div class="result-summary">
                                  <h4>üìä Processing Complete!</h4>
                                  <p><strong>File:</strong> ${status.s3_key}</p>
                                  <p><strong>Status:</strong> ${status.success ? '‚úÖ Success' : '‚ùå Failed'}</p>
                                  <p><strong>Records Processed:</strong> ${status.records_processed}</p>
                                  <p><strong>Errors:</strong> ${status.errors ? status.errors.length : 0}</p>
                              </div>
                          `;
                          
                          if (status.errors && status.errors.length > 0) {
                              html += `
                                  <div class="error-details">
                                      <h5>‚ùå Errors:</h5>
                                      <ul>
                                          ${status.errors.map(error => `<li>${error}</li>`).join('')}
                                      </ul>
                                  </div>
                              `;
                          }
                          
                          resultsContent.innerHTML = html;
                      }
                  </script>
              </body>
              </html>
              '''
          
          def handle_upload(event):
              try:
                  # Parse the multipart form data
                  import base64
                  import tempfile
                  import cgi
                  import io
                  
                  # Get the request body
                  body = event.get('body', '')
                  if event.get('isBase64Encoded', False):
                      body = base64.b64decode(body)
                  else:
                      body = body.encode('utf-8')
                  
                  # Parse multipart form data
                  content_type = event.get('headers', {}).get('content-type', '')
                  if not content_type:
                      content_type = event.get('headers', {}).get('Content-Type', '')
                  
                  # Simple multipart parsing for CSV files
                  # Look for the file content in the multipart data
                  boundary = None
                  if 'boundary=' in content_type:
                      boundary = content_type.split('boundary=')[1]
                  
                  if not boundary:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'error': 'Invalid multipart data',
                              'status': 'error'
                          })
                      }
                  
                  # Parse the multipart data manually
                  parts = body.split(f'--{boundary}'.encode())
                  file_content = None
                  filename = None
                  
                  for part in parts:
                      if b'Content-Disposition: form-data; name="file"' in part:
                          # Extract filename and content
                          lines = part.split(b'\r\n')
                          for line in lines:
                              if b'filename=' in line:
                                  filename = line.split(b'filename=')[1].strip(b'"').decode('utf-8')
                          
                          # Get content after the headers
                          content_start = part.find(b'\r\n\r\n') + 4
                          file_content = part[content_start:].rstrip(b'\r\n-')
                          break
                  
                  if not file_content:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'error': 'No file content found',
                              'status': 'error'
                          })
                      }
                  
                  # Upload the actual file to S3
                  s3 = boto3.client('s3')
                  timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                  
                  # Use a fallback filename if None
                  if not filename:
                      filename = 'upload.csv'
                  
                  s3_key = f"web-upload-{timestamp}-{filename}"
                  
                  s3.put_object(
                      Bucket='foreman-dev-csv-uploads',
                      Key=s3_key,
                      Body=file_content,
                      ContentType='text/csv'
                  )
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'message': f'File uploaded successfully! Processing started... (S3: {s3_key})',
                          'status': 'success',
                          's3_key': s3_key,
                          'timestamp': datetime.now().isoformat()
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': str(e),
                          'status': 'error'
                      })
                  }
          
          def handle_status_check(event):
              try:
                  import json
                  
                  # Parse the request body
                  body = event.get('body', '{}')
                  if event.get('isBase64Encoded', False):
                      body = base64.b64decode(body).decode('utf-8')
                  
                  data = json.loads(body)
                  s3_key = data.get('s3_key')
                  
                  if not s3_key:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'Missing s3_key'})
                      }
                  
                  # Check if file has been processed
                  s3 = boto3.client('s3')
                  
                  # Check if file exists in processed/ or failed/ folder
                  processed_key = f"processed/{s3_key}"
                  failed_key = f"failed/{s3_key}"
                  
                  # Also check for files with similar names (in case filename was modified)
                  try:
                      # List objects in processed folder to find matching files
                      response = s3.list_objects_v2(
                          Bucket='foreman-dev-csv-uploads',
                          Prefix='processed/',
                          MaxKeys=100
                      )
                      
                      processed_files = [obj['Key'] for obj in response.get('Contents', [])]
                      matching_processed = [f for f in processed_files if s3_key.replace('-None', '') in f or s3_key in f]
                      
                      if matching_processed:
                          status = 'processed'
                          success = True
                          actual_processed_key = matching_processed[0]
                      else:
                          # Check for failed files
                          response = s3.list_objects_v2(
                              Bucket='foreman-dev-csv-uploads',
                              Prefix='failed/',
                              MaxKeys=100
                          )
                          
                          failed_files = [obj['Key'] for obj in response.get('Contents', [])]
                          matching_failed = [f for f in failed_files if s3_key.replace('-None', '') in f or s3_key in f]
                          
                          if matching_failed:
                              status = 'failed'
                              success = False
                          else:
                              # File not processed yet
                              return {
                                  'statusCode': 200,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({
                                      'processed': False,
                                      'message': 'File still being processed...'
                                  })
                              }
                  except Exception as e:
                      # Fallback to original logic
                      try:
                          s3.head_object(Bucket='foreman-dev-csv-uploads', Key=processed_key)
                          status = 'processed'
                          success = True
                      except:
                          try:
                              s3.head_object(Bucket='foreman-dev-csv-uploads', Key=failed_key)
                              status = 'failed'
                              success = False
                          except:
                              return {
                                  'statusCode': 200,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({
                                      'processed': False,
                                      'message': 'File still being processed...'
                                  })
                              }
                  
                  # Get actual processing results from DynamoDB
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table('foreman-dev-customers')
                  
                  # Count recent records (last 5 minutes) since we might not have source_file attribute
                  from datetime import datetime, timedelta
                  five_minutes_ago = (datetime.now() - timedelta(minutes=5)).strftime('%Y%m%d_%H%M')
                  
                  response = table.scan()
                  recent_records = [item for item in response['Items'] 
                                  if 'id' in item and 
                                  (s3_key in item.get('id', '') or 
                                   five_minutes_ago in item.get('id', ''))]
                  
                  records_processed = len(recent_records)
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'processed': True,
                          'success': success,
                          's3_key': s3_key,
                          'status': status,
                          'records_processed': records_processed,
                          'errors': [] if success else ['File processing failed']
                      })
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt WebApiRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          S3_BUCKET: 'foreman-dev-csv-uploads'

  # IAM Role for Web API Lambda
  WebApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-web-api-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListObjectsV2
                Resource: 'arn:aws:s3:::foreman-dev-csv-uploads/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: 'arn:aws:dynamodb:us-east-1:631138567000:table/foreman-dev-customers'

  # API Gateway
  WebApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-web-api'
      Description: 'Foreman Web API'

  # API Gateway Method for GET
  WebApiMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for POST
  WebApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Resource for /check-status
  WebApiCheckStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebApiGateway
      ParentId: !GetAtt WebApiGateway.RootResourceId
      PathPart: check-status

  # API Gateway Method for POST /check-status
  WebApiCheckStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !Ref WebApiCheckStatusResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for HEAD
  WebApiMethodHead:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: HEAD
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for OPTIONS (CORS)
  WebApiMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # Lambda Permission for API Gateway
  WebApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebApiGateway}/*/*'

  # API Gateway Deployment
  WebApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WebApiMethodGet
      - WebApiMethodPost
      - WebApiCheckStatusMethod
      - WebApiMethodHead
      - WebApiMethodOptions
    Properties:
      RestApiId: !Ref WebApiGateway
      StageName: prod
      Description: !Sub 'Deployment for ${ProjectName}-${Environment}'

Outputs:
  WebApiUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${WebApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-web-api-url' 