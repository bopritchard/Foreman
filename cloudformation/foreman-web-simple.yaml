AWSTemplateFormatVersion: '2010-09-09'
Description: 'Foreman - Simple Web Interface Deployment'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
  
  ProjectName:
    Type: String
    Default: foreman
    Description: Project name for resource naming

Resources:
  # Lambda Function for API Gateway
  WebApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-web-api'
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          
          s3 = boto3.client('s3')
          
          def lambda_handler(event, context):
              try:
                  # Parse the request
                  http_method = event.get('httpMethod', 'GET')
                  path = event.get('path', '/')
                  
                  if http_method == 'GET':
                      if path == '/':
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'text/html',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': get_html_content()
                          }
                      elif path == '/favicon.ico':
                          # Return a simple 1x1 transparent PNG favicon
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'image/x-icon',
                                  'Access-Control-Allow-Origin': '*',
                                  'Cache-Control': 'public, max-age=31536000'
                              },
                              'body': get_favicon_content(),
                              'isBase64Encoded': True
                          }
                      else:
                          # Return a simple 404 page for unknown paths
                          return {
                              'statusCode': 404,
                              'headers': {
                                  'Content-Type': 'text/html',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': '<html><body><h1>404 - Not Found</h1><p>The requested resource was not found.</p></body></html>'
                          }
                  elif http_method == 'POST':
                      # Check if it's a status check request
                      query_params = event.get('queryStringParameters', {})
                      if query_params is None:
                          query_params = {}
                      
                      if event.get('path') == '/check-status' or query_params.get('action') == 'check-status':
                          return handle_status_check(event)
                      elif query_params.get('action') == 'glue-upload':
                          return handle_glue_upload(event)
                      else:
                          return handle_upload(event)
                  else:
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'Not found'})
                      }
                      
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
          
          def get_favicon_content():
              # Base64 encoded 1x1 transparent PNG favicon
              return 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=='
          
          def get_html_content():
              return '''
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Foreman - CSV Upload</title>
                  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üõ†Ô∏è</text></svg>">
                  <style>
                      body {
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                          max-width: 800px;
                          margin: 0 auto;
                          padding: 20px;
                          background-color: #f5f5f5;
                      }
                      .container {
                          background: white;
                          padding: 30px;
                          border-radius: 10px;
                          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      }
                      h1 {
                          color: #333;
                          text-align: center;
                          margin-bottom: 30px;
                      }
                      .upload-form {
                          border: 2px dashed #ddd;
                          padding: 40px;
                          text-align: center;
                          border-radius: 10px;
                          margin: 20px 0;
                          transition: border-color 0.3s;
                      }
                      .upload-form:hover {
                          border-color: #007bff;
                      }
                      .file-input {
                          margin: 20px 0;
                      }
                      .submit-btn {
                          background: #007bff;
                          color: white;
                          border: none;
                          padding: 12px 30px;
                          border-radius: 5px;
                          cursor: pointer;
                          font-size: 16px;
                      }
                      .submit-btn:hover {
                          background: #0056b3;
                      }
                      .alert {
                          padding: 15px;
                          margin: 20px 0;
                          border-radius: 5px;
                      }
                      .alert-success {
                          background: #d4edda;
                          color: #155724;
                          border: 1px solid #c3e6cb;
                      }
                      .alert-error {
                          background: #f8d7da;
                          color: #721c24;
                          border: 1px solid #f5c6cb;
                      }
                      .info {
                          background: #d1ecf1;
                          color: #0c5460;
                          border: 1px solid #bee5eb;
                          padding: 15px;
                          border-radius: 5px;
                          margin: 20px 0;
                      }
                      .status {
                          margin-top: 30px;
                          padding: 20px;
                          background: #f8f9fa;
                          border-radius: 5px;
                      }
                      .results {
                          margin-top: 30px;
                          padding: 20px;
                          background: #e8f5e8;
                          border-radius: 5px;
                          border: 1px solid #c3e6cb;
                      }
                      .result-summary {
                          background: white;
                          padding: 15px;
                          border-radius: 5px;
                          margin-bottom: 15px;
                      }
                      .error-details {
                          background: #f8d7da;
                          padding: 15px;
                          border-radius: 5px;
                          border: 1px solid #f5c6cb;
                      }
                      .processing-indicator {
                          text-align: center;
                          padding: 20px;
                      }
                      .spinner {
                          width: 40px;
                          height: 40px;
                          border: 4px solid #f3f3f3;
                          border-top: 4px solid #007bff;
                          border-radius: 50%;
                          animation: spin 1s linear infinite;
                          margin: 0 auto 15px;
                      }
                      @keyframes spin {
                          0% { transform: rotate(0deg); }
                          100% { transform: rotate(360deg); }
                      }
                      .processing-details {
                          color: #666;
                          font-size: 14px;
                          margin: 10px 0;
                      }
                      .progress-dots {
                          margin-top: 15px;
                      }
                      .dot {
                          display: inline-block;
                          width: 8px;
                          height: 8px;
                          border-radius: 50%;
                          background-color: #007bff;
                          margin: 0 3px;
                          animation: pulse 1.5s ease-in-out infinite;
                      }
                      .dot:nth-child(2) {
                          animation-delay: 0.2s;
                      }
                      .dot:nth-child(3) {
                          animation-delay: 0.4s;
                      }
                      @keyframes pulse {
                          0%, 100% { opacity: 0.3; transform: scale(1); }
                          50% { opacity: 1; transform: scale(1.2); }
                      }
                      
                      /* Enhanced Progress Tracking Styles */
                      .progress-container {
                          margin: 20px 0;
                          padding: 20px;
                          background: #f8f9fa;
                          border-radius: 10px;
                          border: 1px solid #dee2e6;
                      }
                      .progress-stages {
                          display: flex;
                          justify-content: space-between;
                          margin-bottom: 20px;
                          flex-wrap: wrap;
                      }
                      .stage {
                          flex: 1;
                          text-align: center;
                          padding: 10px;
                          margin: 0 5px;
                          border-radius: 8px;
                          min-width: 120px;
                          position: relative;
                      }
                      .stage.pending {
                          background: #e9ecef;
                          color: #6c757d;
                          border: 2px solid #dee2e6;
                      }
                      .stage.active {
                          background: #007bff;
                          color: white;
                          border: 2px solid #0056b3;
                          animation: pulse-active 2s infinite;
                      }
                      .stage.completed {
                          background: #28a745;
                          color: white;
                          border: 2px solid #1e7e34;
                      }
                      .stage.failed {
                          background: #dc3545;
                          color: white;
                          border: 2px solid #c82333;
                      }
                      @keyframes pulse-active {
                          0%, 100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7); }
                          50% { box-shadow: 0 0 0 10px rgba(0, 123, 255, 0); }
                      }
                      .stage-icon {
                          font-size: 24px;
                          margin-bottom: 5px;
                          display: block;
                      }
                      .stage-title {
                          font-size: 12px;
                          font-weight: bold;
                          margin-bottom: 5px;
                      }
                      .stage-details {
                          font-size: 10px;
                          opacity: 0.8;
                      }
                      .progress-bar {
                          width: 100%;
                          height: 8px;
                          background: #e9ecef;
                          border-radius: 4px;
                          overflow: hidden;
                          margin: 15px 0;
                      }
                      .progress-fill {
                          height: 100%;
                          background: linear-gradient(90deg, #007bff, #28a745);
                          transition: width 0.5s ease;
                          border-radius: 4px;
                      }
                      .progress-text {
                          text-align: center;
                          font-size: 14px;
                          color: #666;
                          margin: 10px 0;
                      }
                      .record-counter {
                          display: flex;
                          justify-content: space-around;
                          margin: 15px 0;
                          padding: 15px;
                          background: white;
                          border-radius: 8px;
                          border: 1px solid #dee2e6;
                      }
                      .counter-item {
                          text-align: center;
                          flex: 1;
                      }
                      .counter-number {
                          font-size: 24px;
                          font-weight: bold;
                          color: #007bff;
                      }
                      .counter-label {
                          font-size: 12px;
                          color: #666;
                          margin-top: 5px;
                      }
                      .counter-success .counter-number {
                          color: #28a745;
                      }
                      .counter-error .counter-number {
                          color: #dc3545;
                      }
                      .counter-pending .counter-number {
                          color: #ffc107;
                      }
                      .controls {
                          margin: 20px 0;
                          text-align: center;
                      }
                      .control-btn {
                          background: #6c757d;
                          color: white;
                          border: none;
                          padding: 8px 16px;
                          border-radius: 5px;
                          cursor: pointer;
                          margin: 0 5px;
                          font-size: 14px;
                      }
                      .control-btn:hover {
                          background: #5a6268;
                      }
                      .control-btn.primary {
                          background: #007bff;
                      }
                      .control-btn.primary:hover {
                          background: #0056b3;
                      }
                      .control-btn.success {
                          background: #28a745;
                      }
                      .control-btn.success:hover {
                          background: #1e7e34;
                      }
                      .control-btn.danger {
                          background: #dc3545;
                      }
                      .control-btn.danger:hover {
                          background: #c82333;
                      }
                      .status-updates {
                          max-height: 200px;
                          overflow-y: auto;
                          background: white;
                          border: 1px solid #dee2e6;
                          border-radius: 5px;
                          padding: 10px;
                          margin: 15px 0;
                      }
                      .status-update {
                          padding: 8px;
                          margin: 5px 0;
                          border-radius: 4px;
                          font-size: 12px;
                          border-left: 3px solid #dee2e6;
                      }
                      .status-update.info {
                          background: #d1ecf1;
                          border-left-color: #17a2b8;
                      }
                      .status-update.success {
                          background: #d4edda;
                          border-left-color: #28a745;
                      }
                      .status-update.warning {
                          background: #fff3cd;
                          border-left-color: #ffc107;
                      }
                      .status-update.error {
                          background: #f8d7da;
                          border-left-color: #dc3545;
                      }
                      .timestamp {
                          color: #666;
                          font-size: 10px;
                      }
                      .glue-job-details {
                          background: #f8f9fa;
                          padding: 15px;
                          border-radius: 8px;
                          margin: 15px 0;
                          border-left: 4px solid #007bff;
                      }
                      .job-metrics {
                          display: grid;
                          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                          gap: 10px;
                          margin: 15px 0;
                      }
                      .metric {
                          background: white;
                          padding: 10px;
                          border-radius: 5px;
                          text-align: center;
                          border: 1px solid #dee2e6;
                      }
                      .metric-value {
                          font-size: 18px;
                          font-weight: bold;
                          color: #007bff;
                      }
                      .metric-label {
                          font-size: 11px;
                          color: #666;
                          margin-top: 5px;
                      }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <h1>üõ†Ô∏è Foreman CSV Upload</h1>
                      
                      <div id="messages"></div>
                      
                      <div class="info">
                          <h3>üìã How it works:</h3>
                          <ol>
                              <li>Upload your CSV file using the form below</li>
                              <li>File is automatically uploaded to S3</li>
                              <li>S3 triggers Lambda function for processing</li>
                              <li>Data is validated and submitted to GraphQL API</li>
                              <li>Results are stored in DynamoDB</li>
                          </ol>
                          <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 5px; font-size: 14px;">
                              <strong>üí° Processing Details:</strong>
                              <ul style="margin: 5px 0 0 20px;">
                                  <li><strong>AWS Glue:</strong> Uses pandas and numpy for advanced data processing</li>
                                  <li><strong>No Timeout Issues:</strong> API responds immediately, processing continues in background</li>
                                  <li><strong>Scalable Processing:</strong> Handles large files efficiently</li>
                                  <li><strong>Email Validation:</strong> GSI-based uniqueness checking with fallback</li>
                              </ul>
                          </div>
                      </div>
                      
                      <form id="uploadForm" class="upload-form">
                          <h3>üì§ Upload CSV File</h3>
                          <p>Select a CSV file to upload and process:</p>
                          
                          <div class="file-input">
                              <input type="file" name="file" accept=".csv" required>
                          </div>
                          
                                                <button type="submit" class="submit-btn">üöÄ Upload & Process</button>
                  </form>
                  
                  <div id="results" class="results" style="display: none;">
                      <h3>üìà Upload Results</h3>
                      <div id="resultsContent"></div>
                  </div>
                  
                  <div class="status">
                      <h3>üìä Processing Status</h3>
                      <p><strong>S3 Bucket:</strong> foreman-dev-csv-uploads</p>
                      <p><strong>Region:</strong> us-east-1</p>
                      <p><strong>Auto-detection:</strong> Customer, Project, and other models</p>
                  </div>
                  </div>
                  
                  <script>
                      let currentUpload = null;
                      
                      document.getElementById('uploadForm').addEventListener('submit', async function(e) {
                          e.preventDefault();
                          
                          const fileInput = document.querySelector('input[type="file"]');
                          const file = fileInput.files[0];
                          
                          if (!file) {
                              showMessage('‚ùå Please select a file', 'error');
                              return;
                          }
                          
                          try {
                              // Convert file to base64
                              const base64Data = await fileToBase64(file);
                              
                              // Call Glue API through the same domain to avoid CORS
                              const response = await fetch('?action=glue-upload', {
                                  method: 'POST',
                                  headers: {
                                      'Content-Type': 'application/json'
                                  },
                                  body: JSON.stringify({
                                      csv_data: base64Data,
                                      filename: file.name
                                  })
                              });
                              
                              const result = await response.json();
                              
                              if (response.ok && result.success) {
                                  showMessage('‚úÖ ' + result.message, 'success');
                                  
                                  // Show immediate success with Glue processing details
                                  showGlueResults(result);
                              } else {
                                  showMessage('‚ùå ' + (result.error || 'Upload failed'), 'error');
                              }
                          } catch (error) {
                              showMessage('‚ùå Upload failed: ' + error.message, 'error');
                          }
                      });
                      
                      function fileToBase64(file) {
                          return new Promise((resolve, reject) => {
                              const reader = new FileReader();
                              reader.readAsDataURL(file);
                              reader.onload = () => {
                                  // Remove data URL prefix to get just the base64 data
                                  const base64 = reader.result.split(',')[1];
                                  resolve(base64);
                              };
                              reader.onerror = error => reject(error);
                          });
                      }
                      
                      function showGlueResults(result) {
                          const resultsDiv = document.getElementById('results');
                          const resultsContent = document.getElementById('resultsContent');
                          
                          resultsDiv.style.display = 'block';
                          resultsContent.innerHTML = `
                              <div class="result-summary">
                                  <h4>üöÄ Glue Job Started Successfully!</h4>
                                  <p><strong>File:</strong> ${result.filename}</p>
                                  <p><strong>Job Run ID:</strong> ${result.job_run_id}</p>
                                  <p><strong>Status:</strong> ‚úÖ Processing with AWS Glue</p>
                                  <p><strong>Processing Method:</strong> ${result.processing_method}</p>
                              </div>
                              
                              <div class="progress-container">
                                  <h5>üìä Real-Time Processing Progress</h5>
                                  
                                  <div class="progress-stages">
                                      <div class="stage pending" id="stage-upload">
                                          <span class="stage-icon">üì§</span>
                                          <div class="stage-title">Upload</div>
                                          <div class="stage-details">File uploaded to S3</div>
                                      </div>
                                      <div class="stage pending" id="stage-trigger">
                                          <span class="stage-icon">‚ö°</span>
                                          <div class="stage-title">Trigger</div>
                                          <div class="stage-details">Glue job started</div>
                                      </div>
                                      <div class="stage pending" id="stage-processing">
                                          <span class="stage-icon">üîÑ</span>
                                          <div class="stage-title">Processing</div>
                                          <div class="stage-details">Reading CSV data</div>
                                      </div>
                                      <div class="stage pending" id="stage-validation">
                                          <span class="stage-icon">‚úÖ</span>
                                          <div class="stage-title">Validation</div>
                                          <div class="stage-details">Data validation</div>
                                      </div>
                                      <div class="stage pending" id="stage-database">
                                          <span class="stage-icon">üíæ</span>
                                          <div class="stage-title">Database</div>
                                          <div class="stage-details">Writing to DynamoDB</div>
                                      </div>
                                      <div class="stage pending" id="stage-complete">
                                          <span class="stage-icon">üéâ</span>
                                          <div class="stage-title">Complete</div>
                                          <div class="stage-details">Processing finished</div>
                                      </div>
                                  </div>
                                  
                                  <div class="progress-bar">
                                      <div class="progress-fill" id="progress-fill" style="width: 16%"></div>
                                  </div>
                                  <div class="progress-text" id="progress-text">Upload completed, starting Glue job...</div>
                                  
                                  <div class="record-counter">
                                      <div class="counter-item counter-pending">
                                          <div class="counter-number" id="counter-total">0</div>
                                          <div class="counter-label">Total Records</div>
                                      </div>
                                      <div class="counter-item counter-pending">
                                          <div class="counter-number" id="counter-processed">0</div>
                                          <div class="counter-label">Processed</div>
                                      </div>
                                      <div class="counter-item counter-pending">
                                          <div class="counter-number" id="counter-success">0</div>
                                          <div class="counter-label">Successful</div>
                                      </div>
                                      <div class="counter-item counter-pending">
                                          <div class="counter-number" id="counter-errors">0</div>
                                          <div class="counter-label">Errors</div>
                                      </div>
                                  </div>
                                  
                                  <div class="controls">
                                      <button class="control-btn primary" onclick="startDetailedPolling()">üîÑ Start Real-Time Updates</button>
                                      <button class="control-btn" onclick="pausePolling()">‚è∏Ô∏è Pause Updates</button>
                                      <button class="control-btn success" onclick="checkJobStatus()">üìä Check Job Status</button>
                                      <button class="control-btn" onclick="viewLogs()">üìã View Logs</button>
                                  </div>
                                  
                                  <div class="status-updates" id="status-updates">
                                      <div class="status-update info">
                                          <span class="timestamp">${new Date().toLocaleTimeString()}</span>
                                          ‚úÖ File uploaded successfully to S3
                                      </div>
                                      <div class="status-update info">
                                          <span class="timestamp">${new Date().toLocaleTimeString()}</span>
                                          üöÄ AWS Glue job triggered with ID: ${result.job_run_id}
                                      </div>
                                  </div>
                                  
                                  <div class="glue-job-details">
                                      <h6>üîß AWS Glue Job Details</h6>
                                      <div class="job-metrics">
                                          <div class="metric">
                                              <div class="metric-value" id="job-duration">--</div>
                                              <div class="metric-label">Duration</div>
                                          </div>
                                          <div class="metric">
                                              <div class="metric-value" id="dpu-usage">--</div>
                                              <div class="metric-label">DPU Usage</div>
                                          </div>
                                          <div class="metric">
                                              <div class="metric-value" id="memory-usage">--</div>
                                              <div class="metric-label">Memory</div>
                                          </div>
                                          <div class="metric">
                                              <div class="metric-value" id="processing-speed">--</div>
                                              <div class="metric-label">Records/sec</div>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                              
                              <div style="margin-top: 15px; padding: 15px; background: #e8f5e8; border-radius: 5px; border-left: 4px solid #28a745;">
                                  <h5 style="margin: 0 0 10px 0; color: #28a745;">
                                      üéØ AWS Glue Processing Benefits
                                  </h5>
                                  <p style="margin: 5px 0; color: #155724;">
                                      <strong>‚úÖ No Timeout Issues:</strong> API responds immediately
                                  </p>
                                  <p style="margin: 5px 0; color: #155724;">
                                      <strong>‚úÖ Full Pandas Support:</strong> Complete data processing capabilities
                                  </p>
                                  <p style="margin: 5px 0; color: #155724;">
                                      <strong>‚úÖ Scalable Processing:</strong> Handles large files efficiently
                                  </p>
                                  <p style="margin: 5px 0; color: #155724;">
                                      <strong>‚úÖ Background Processing:</strong> Data processing continues in AWS Glue
                                  </p>
                              </div>
                          `;
                          
                          // Start real-time progress tracking
                          startDetailedPolling();
                      }
                      
                      let pollingInterval = null;
                      let isPollingPaused = false;
                      
                      function startDetailedPolling() {
                          if (pollingInterval) {
                              clearInterval(pollingInterval);
                          }
                          
                          isPollingPaused = false;
                          pollingInterval = setInterval(async () => {
                              if (isPollingPaused) return;
                              
                              try {
                                  const response = await fetch('?action=check-status', {
                                      method: 'POST',
                                      headers: {
                                          'Content-Type': 'application/json'
                                      },
                                      body: JSON.stringify({
                                          s3_key: currentUpload?.s3_key || 'unknown',
                                          timestamp: currentUpload?.timestamp || Date.now(),
                                          detailed: true
                                      })
                                  });
                                  
                                  if (response.ok) {
                                      const status = await response.json();
                                      updateProgressDisplay(status);
                                  }
                              } catch (error) {
                                  console.error('Polling error:', error);
                                  addStatusUpdate('error', `Polling error: ${error.message}`);
                              }
                          }, 3000); // Poll every 3 seconds
                          
                          addStatusUpdate('info', 'üîÑ Real-time progress tracking started');
                      }
                      
                      function pausePolling() {
                          isPollingPaused = !isPollingPaused;
                          const btn = event.target;
                          if (isPollingPaused) {
                              btn.textContent = '‚ñ∂Ô∏è Resume Updates';
                              btn.className = 'control-btn success';
                              addStatusUpdate('warning', '‚è∏Ô∏è Progress tracking paused');
                          } else {
                              btn.textContent = '‚è∏Ô∏è Pause Updates';
                              btn.className = 'control-btn';
                              addStatusUpdate('info', '‚ñ∂Ô∏è Progress tracking resumed');
                          }
                      }
                      
                      function updateProgressDisplay(status) {
                          // Update progress bar
                          const progressFill = document.getElementById('progress-fill');
                          const progressText = document.getElementById('progress-text');
                          
                          if (status.processed) {
                              progressFill.style.width = '100%';
                              progressText.textContent = '‚úÖ Processing complete!';
                              updateStage('complete', 'completed');
                          } else {
                              // Estimate progress based on time elapsed
                              const elapsed = Date.now() - (currentUpload?.timestamp || Date.now());
                              const estimatedTotal = 60000; // 60 seconds
                              const progress = Math.min((elapsed / estimatedTotal) * 100, 95);
                              progressFill.style.width = progress + '%';
                              progressText.textContent = `üîÑ Processing... (${Math.round(progress)}%)`;
                          }
                          
                          // Update record counters
                          if (status.records_processed !== undefined) {
                              document.getElementById('counter-total').textContent = status.total_records || status.records_processed;
                              document.getElementById('counter-processed').textContent = status.records_processed;
                              document.getElementById('counter-success').textContent = status.successful_records || status.records_processed;
                              document.getElementById('counter-errors').textContent = status.error_records || 0;
                              
                              // Update counter colors
                              updateCounterColors(status);
                          }
                          
                          // Update job metrics
                          if (status.job_metrics) {
                              document.getElementById('job-duration').textContent = status.job_metrics.duration || '--';
                              document.getElementById('dpu-usage').textContent = status.job_metrics.dpu_usage || '--';
                              document.getElementById('memory-usage').textContent = status.job_metrics.memory_usage || '--';
                              document.getElementById('processing-speed').textContent = status.job_metrics.processing_speed || '--';
                          }
                          
                          // Update stages based on processing status
                          updateProcessingStages(status);
                          
                          // Add status updates
                          if (status.status_updates) {
                              status.status_updates.forEach(update => {
                                  addStatusUpdate(update.type, update.message);
                              });
                          }
                      }
                      
                      function updateStage(stageId, status) {
                          const stage = document.getElementById(`stage-${stageId}`);
                          if (stage) {
                              stage.className = `stage ${status}`;
                          }
                      }
                      
                      function updateProcessingStages(status) {
                          // Update stages based on processing progress
                          if (status.job_status) {
                              switch (status.job_status) {
                                  case 'STARTING':
                                      updateStage('trigger', 'active');
                                      break;
                                  case 'RUNNING':
                                      updateStage('trigger', 'completed');
                                      updateStage('processing', 'active');
                                      break;
                                  case 'STOPPING':
                                  case 'STOPPED':
                                      updateStage('processing', 'completed');
                                      updateStage('validation', 'completed');
                                      updateStage('database', 'completed');
                                      updateStage('complete', 'completed');
                                      break;
                                  case 'FAILED':
                                      updateStage('processing', 'failed');
                                      addStatusUpdate('error', '‚ùå Glue job failed');
                                      break;
                              }
                          }
                          
                          // Update based on DynamoDB records
                          if (status.records_processed > 0) {
                              updateStage('validation', 'completed');
                              updateStage('database', 'completed');
                          }
                      }
                      
                      function updateCounterColors(status) {
                          const totalCounter = document.querySelector('#counter-total').parentElement;
                          const processedCounter = document.querySelector('#counter-processed').parentElement;
                          const successCounter = document.querySelector('#counter-success').parentElement;
                          const errorCounter = document.querySelector('#counter-errors').parentElement;
                          
                          // Reset all counters
                          [totalCounter, processedCounter, successCounter, errorCounter].forEach(counter => {
                              counter.className = 'counter-item counter-pending';
                          });
                          
                          // Update based on status
                          if (status.records_processed > 0) {
                              processedCounter.className = 'counter-item counter-success';
                          }
                          
                          if (status.successful_records > 0) {
                              successCounter.className = 'counter-item counter-success';
                          }
                          
                          if (status.error_records > 0) {
                              errorCounter.className = 'counter-item counter-error';
                          }
                      }
                      
                      function addStatusUpdate(type, message) {
                          const statusUpdates = document.getElementById('status-updates');
                          const update = document.createElement('div');
                          update.className = `status-update ${type}`;
                          update.innerHTML = `
                              <span class="timestamp">${new Date().toLocaleTimeString()}</span>
                              ${message}
                          `;
                          statusUpdates.appendChild(update);
                          statusUpdates.scrollTop = statusUpdates.scrollHeight;
                          
                          // Keep only last 20 updates
                          const updates = statusUpdates.querySelectorAll('.status-update');
                          if (updates.length > 20) {
                              updates[0].remove();
                          }
                      }
                      
                      function checkJobStatus() {
                          addStatusUpdate('info', 'üìä Checking detailed job status...');
                          // This would call a more detailed status check
                      }
                      
                      function viewLogs() {
                          addStatusUpdate('info', 'üìã Viewing CloudWatch logs...');
                          // This would open CloudWatch logs in a new window
                      }
                      
                      function showMessage(message, type) {
                          const messagesDiv = document.getElementById('messages');
                          const alertDiv = document.createElement('div');
                          alertDiv.className = `alert alert-${type}`;
                          alertDiv.textContent = message;
                          messagesDiv.appendChild(alertDiv);
                          
                          setTimeout(() => {
                              alertDiv.remove();
                          }, 5000);
                      }
                      
                      function startPolling() {
                          if (!currentUpload) return;
                          
                          const resultsDiv = document.getElementById('results');
                          const resultsContent = document.getElementById('resultsContent');
                          
                          resultsDiv.style.display = 'block';
                          resultsContent.innerHTML = `
                              <div class="processing-indicator">
                                  <div class="spinner"></div>
                                  <p>üîÑ Processing your file...</p>
                                  <p class="processing-details">Checking S3 bucket and DynamoDB for results</p>
                                  <div class="progress-dots">
                                      <span class="dot"></span>
                                      <span class="dot"></span>
                                      <span class="dot"></span>
                                  </div>
                              </div>
                          `;
                          
                          // Poll every 3 seconds for up to 60 seconds
                          let attempts = 0;
                          const maxAttempts = 20;
                          
                          const pollInterval = setInterval(async () => {
                              attempts++;
                              
                              try {
                                  // Check S3 for processed file
                                  const response = await fetch('?action=check-status', {
                                      method: 'POST',
                                      headers: {
                                          'Content-Type': 'application/json'
                                      },
                                      body: JSON.stringify({
                                          s3_key: currentUpload.s3_key,
                                          timestamp: currentUpload.timestamp
                                      })
                                  });
                                  
                                  if (response.ok) {
                                      const status = await response.json();
                                      if (status.processed) {
                                          clearInterval(pollInterval);
                                          showResults(status);
                                          return;
                                      }
                                  }
                                  
                                  if (attempts >= maxAttempts) {
                                      clearInterval(pollInterval);
                                      resultsContent.innerHTML = `
                                          <div class="processing-indicator">
                                              <p>‚è∞ Processing timeout (60 seconds)</p>
                                              <p class="processing-details">The system is still working in the background</p>
                                              <p><strong>What to check:</strong></p>
                                              <ul>
                                                  <li>S3 bucket: <code>foreman-dev-csv-uploads</code></li>
                                                  <li>Look for your file in <code>processed/</code> folder</li>
                                                  <li>Check DynamoDB table: <code>foreman-dev-customers</code></li>
                                              </ul>
                                              <p><em>Processing may still be running in the background.</em></p>
                                          </div>
                                      `;
                                  }
                              } catch (error) {
                                  console.error('Polling error:', error);
                                  if (attempts >= maxAttempts) {
                                      clearInterval(pollInterval);
                                      resultsContent.innerHTML = `
                                          <div class="processing-indicator">
                                              <p>‚ùå Error checking status</p>
                                              <p class="processing-details">Check S3 bucket manually for results</p>
                                          </div>
                                      `;
                                  }
                              }
                          }, 3000);
                      }
                      
                      function showResults(status) {
                          const resultsContent = document.getElementById('resultsContent');
                          
                          let html = `
                              <div class="result-summary">
                                  <h4>üìä Processing Complete!</h4>
                                  <p><strong>File:</strong> ${status.s3_key}</p>
                          `;
                          
                          if (status.status === 'duplicate_skipped') {
                              html += `
                                  <p><strong>Status:</strong> ‚ö†Ô∏è Duplicate File Skipped</p>
                                  <p><strong>Message:</strong> ${status.message || 'File content was already processed previously'}</p>
                                  <p><strong>Records Processed:</strong> 0 (duplicate content detected)</p>
                              `;
                          } else {
                              html += `
                                  <p><strong>Status:</strong> ${status.success ? '‚úÖ Success' : '‚ùå Failed'}</p>
                                  <p><strong>Records Processed:</strong> ${status.records_processed}</p>
                                  <p><strong>Errors:</strong> ${status.errors ? status.errors.length : 0}</p>
                              `;
                          }
                          
                          // Add processing method information
                          if (status.processing_method) {
                              const methodInfo = status.processing_details || {};
                              html += `
                                  <div style="margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 5px; border-left: 4px solid #007bff;">
                                      <h5 style="margin: 0 0 10px 0; color: #007bff;">
                                          üîß Processing Method: ${methodInfo.method || status.processing_method}
                                      </h5>
                                      <p style="margin: 5px 0; color: #666;">
                                          <strong>Description:</strong> ${methodInfo.description || 'Data processing completed'}
                                      </p>
                                      <p style="margin: 5px 0; color: #666;">
                                          <strong>Performance:</strong> ${methodInfo.performance || 'Standard processing'}
                                      </p>
                                      ${methodInfo.features ? `
                                          <p style="margin: 5px 0; color: #666;">
                                              <strong>Features:</strong> ${methodInfo.features.join(', ')}
                                          </p>
                                      ` : ''}
                                      ${methodInfo.data_quality_score ? `
                                          <p style="margin: 5px 0; color: #666;">
                                              <strong>Data Quality Score:</strong> ${methodInfo.data_quality_score}/100
                                          </p>
                                      ` : ''}
                                      ${methodInfo.fallback_reason ? `
                                          <p style="margin: 5px 0; color: #ffc107;">
                                              <strong>‚ö†Ô∏è Fallback Reason:</strong> ${methodInfo.fallback_reason}
                                          </p>
                                      ` : ''}
                                  </div>
                              `;
                          }
                          
                          html += `</div>`;
                          
                          if (status.errors && status.errors.length > 0) {
                              html += `
                                  <div class="error-details">
                                      <h5>‚ùå Errors:</h5>
                                      <ul>
                                          ${status.errors.map(error => `<li>${error}</li>`).join('')}
                                      </ul>
                                  </div>
                              `;
                          }
                          
                          resultsContent.innerHTML = html;
                      }
                  </script>
              </body>
              </html>
              '''
          
          def handle_upload(event):
              try:
                  # Parse the multipart form data
                  import base64
                  import tempfile
                  import cgi
                  import io
                  
                  # Debug: Log the event structure
                  print(f"Event keys: {list(event.keys()) if event else 'None'}")
                  print(f"Headers: {event.get('headers') if event else 'None'}")
                  print(f"Body type: {type(event.get('body')) if event else 'None'}")
                  
                  # Get the request body
                  body = event.get('body', '')
                  if body is None:
                      body = ''
                  
                  if event.get('isBase64Encoded', False):
                      body = base64.b64decode(body)
                  else:
                      body = body.encode('utf-8')
                  
                  # Parse multipart form data
                  headers = event.get('headers', {})
                  if headers is None:
                      headers = {}
                  
                  content_type = headers.get('content-type', '')
                  if not content_type:
                      content_type = headers.get('Content-Type', '')
                  
                  # Simple multipart parsing for CSV files
                  # Look for the file content in the multipart data
                  boundary = None
                  if content_type and 'boundary=' in content_type:
                      try:
                          boundary = content_type.split('boundary=')[1]
                      except (IndexError, AttributeError):
                          boundary = None
                  
                  if not boundary:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'error': 'Invalid multipart data - no boundary found',
                              'status': 'error'
                          })
                      }
                  
                  # Parse the multipart data manually
                  parts = body.split(f'--{boundary}'.encode())
                  file_content = None
                  filename = None
                  
                  for part in parts:
                      if part is None:
                          continue
                      
                      if b'Content-Disposition: form-data; name="file"' in part:
                          # Extract filename and content
                          lines = part.split(b'\r\n')
                          for line in lines:
                              if line is None:
                                  continue
                              if b'filename=' in line:
                                  try:
                                      filename_part = line.split(b'filename=')[1]
                                      if filename_part:
                                          filename = filename_part.strip(b'"').decode('utf-8')
                                  except (IndexError, UnicodeDecodeError):
                                      filename = None
                          
                          # Get content after the headers
                          content_start = part.find(b'\r\n\r\n')
                          if content_start != -1:
                              content_start += 4
                              file_content = part[content_start:].rstrip(b'\r\n-')
                          else:
                              file_content = None
                          break
                  
                  if not file_content:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'error': 'No file content found',
                              'status': 'error'
                          })
                      }
                  
                  # Upload the actual file to S3
                  s3 = boto3.client('s3')
                  timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                  
                  # Use a fallback filename if None
                  if not filename:
                      filename = 'upload.csv'
                  
                  s3_key = f"web-upload-{timestamp}-{filename}"
                  
                  s3.put_object(
                      Bucket='foreman-dev-csv-uploads',
                      Key=s3_key,
                      Body=file_content,
                      ContentType='text/csv'
                  )
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'message': f'File uploaded successfully! Processing started... (S3: {s3_key})',
                          'status': 'success',
                          's3_key': s3_key,
                          'timestamp': datetime.now().isoformat()
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': str(e),
                          'status': 'error'
                      })
                  }
          
          def handle_status_check(event):
              try:
                  import json
                  import boto3
                  import os
                  from datetime import datetime
                  
                  # Parse the request body
                  body = event.get('body', '{}')
                  if event.get('isBase64Encoded', False):
                      body = base64.b64decode(body).decode('utf-8')
                  
                  data = json.loads(body)
                  s3_key = data.get('s3_key')
                  detailed = data.get('detailed', False)
                  timestamp = data.get('timestamp', 0)
                  
                  if not s3_key:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'Missing s3_key'})
                      }
                  
                  # Initialize response data with enhanced tracking
                  response_data = {
                      'processed': False,
                      'job_status': 'UNKNOWN',
                      'job_run_id': None,
                      'job_metrics': {},
                      'status_updates': [],
                      'total_records': 0,
                      'records_processed': 0,
                      'successful_records': 0,
                      'error_records': 0,
                      'processing_stages': {
                          'upload': 'completed',
                          'trigger': 'pending',
                          'processing': 'pending',
                          'validation': 'pending',
                          'database': 'pending',
                          'complete': 'pending'
                      }
                  }
                  
                  # Check if file has been processed
                  s3 = boto3.client('s3')
                  
                  # Check if file exists in processed/ or failed/ folder
                  processed_key = f"processed/{s3_key}"
                  failed_key = f"failed/{s3_key}"
                  
                  # Enhanced Glue job status checking
                  try:
                      glue = boto3.client('glue')
                      job_name = f"foreman-{os.environ.get('ENVIRONMENT', 'dev')}-csv-processing-job"
                      
                      # Get recent job runs
                      response = glue.get_job_runs(JobName=job_name, MaxResults=5)
                      job_status = 'UNKNOWN'
                      job_run_id = None
                      job_metrics = {}
                      
                      for job_run in response['JobRuns']:
                          # Check if this job run processed our file
                          arguments = job_run.get('Arguments', {})
                          if arguments.get('--s3_key') == s3_key:
                              job_status = job_run['JobRunState']
                              job_run_id = job_run['JobRunId']
                              
                              # Calculate job metrics
                              if job_run.get('StartedOn') and job_run.get('CompletedOn'):
                                  duration = (job_run['CompletedOn'] - job_run['StartedOn']).total_seconds()
                                  job_metrics['duration'] = f"{duration:.1f}s"
                                  job_metrics['processing_speed'] = 'Calculating...'
                              elif job_run.get('StartedOn'):
                                  duration = (datetime.now() - job_run['StartedOn']).total_seconds()
                                  job_metrics['duration'] = f"{duration:.1f}s"
                                  job_metrics['processing_speed'] = 'In progress...'
                              
                              job_metrics['dpu_usage'] = f"{job_run.get('MaxCapacity', 0)} DPU"
                              job_metrics['memory_usage'] = '4GB+'
                              
                              # Update processing stages based on job status
                              if job_status == 'STARTING':
                                  response_data['processing_stages']['trigger'] = 'active'
                                  if detailed:
                                      response_data['status_updates'].append({
                                          'type': 'info',
                                          'message': f'üöÄ Glue job starting: {job_run_id}'
                                      })
                              elif job_status == 'RUNNING':
                                  response_data['processing_stages']['trigger'] = 'completed'
                                  response_data['processing_stages']['processing'] = 'active'
                                  if detailed:
                                      response_data['status_updates'].append({
                                          'type': 'info',
                                          'message': f'üîÑ Glue job running: {job_run_id}'
                                      })
                              elif job_status == 'STOPPED':
                                  response_data['processing_stages']['processing'] = 'completed'
                                  response_data['processing_stages']['validation'] = 'completed'
                                  response_data['processing_stages']['database'] = 'completed'
                                  if detailed:
                                      response_data['status_updates'].append({
                                          'type': 'success',
                                          'message': f'‚úÖ Glue job completed: {job_run_id}'
                                      })
                              elif job_status == 'FAILED':
                                  response_data['processing_stages']['processing'] = 'failed'
                                  if detailed:
                                      response_data['status_updates'].append({
                                          'type': 'error',
                                          'message': f'‚ùå Glue job failed: {job_run_id}'
                                      })
                              
                              break
                      
                      response_data['job_status'] = job_status
                      response_data['job_run_id'] = job_run_id
                      response_data['job_metrics'] = job_metrics
                      
                      # If job is still running, return current status
                      if job_status in ['STARTING', 'RUNNING']:
                          response_data['message'] = f'Glue job {job_status.lower()}: {job_run_id}'
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps(response_data)
                          }
                      elif job_status == 'FAILED':
                          response_data['processed'] = True
                          response_data['success'] = False
                          response_data['message'] = 'Glue job failed'
                          response_data['errors'] = ['AWS Glue job execution failed']
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps(response_data)
                          }
                  except Exception as e:
                      # If Glue job checking fails, continue with file-based checking
                      if detailed:
                          response_data['status_updates'].append({
                              'type': 'warning',
                              'message': f'‚ö†Ô∏è Could not check Glue job status: {str(e)}'
                          })
                  
                  # Also check for files with similar names (in case filename was modified)
                  try:
                      # List objects in processed folder to find matching files
                      response = s3.list_objects_v2(
                          Bucket='foreman-dev-csv-uploads',
                          Prefix='processed/',
                          MaxKeys=100
                      )
                      
                      processed_files = [obj['Key'] for obj in response.get('Contents', []) if obj and 'Key' in obj]
                      matching_processed = [f for f in processed_files if s3_key.replace('-None', '') in f or s3_key in f]
                      
                      if matching_processed:
                          status = 'processed'
                          success = True
                          actual_processed_key = matching_processed[0]
                      else:
                          # Check for failed files
                          response = s3.list_objects_v2(
                              Bucket='foreman-dev-csv-uploads',
                              Prefix='failed/',
                              MaxKeys=100
                          )
                          
                          failed_files = [obj['Key'] for obj in response.get('Contents', []) if obj and 'Key' in obj]
                          matching_failed = [f for f in failed_files if s3_key.replace('-None', '') in f or s3_key in f]
                          
                          if matching_failed:
                              status = 'failed'
                              success = False
                          else:
                              # File not processed yet
                              return {
                                  'statusCode': 200,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({
                                      'processed': False,
                                      'message': 'File still being processed...'
                                  })
                              }
                  except Exception as e:
                      # Fallback to original logic
                      try:
                          s3.head_object(Bucket='foreman-dev-csv-uploads', Key=processed_key)
                          status = 'processed'
                          success = True
                      except:
                          try:
                              s3.head_object(Bucket='foreman-dev-csv-uploads', Key=failed_key)
                              status = 'failed'
                              success = False
                          except:
                              return {
                                  'statusCode': 200,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({
                                      'processed': False,
                                      'message': 'File still being processed...'
                                  })
                              }
                  
                  # Get actual processing results from DynamoDB
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table('foreman-dev-customers')
                  
                  # Check if this specific file was processed by looking for records with this source_file
                  response = table.scan()
                  records_from_this_upload = []
                  
                  # Find records that were created from this specific file upload
                  for item in response['Items']:
                      if item and 'source_file' in item and item['source_file'] == s3_key:
                          records_from_this_upload.append(item)
                  
                  records_processed = len(records_from_this_upload)
                  
                  # Check if this was a duplicate file upload
                  # If file was processed but no records were created, it was likely a duplicate
                  if status == 'processed' and records_processed == 0:
                      # This was likely a duplicate file that was skipped
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'processed': True,
                              'success': True,
                              's3_key': s3_key,
                              'status': 'duplicate_skipped',
                              'records_processed': 0,
                              'message': 'File was skipped - duplicate content detected',
                              'errors': []
                          })
                      }
                  
                  # Try to get processing method from the first record
                  processing_method = 'unknown'
                  processing_details = {}
                  
                  if records_from_this_upload:
                      # Look for processing method in the first record's metadata
                      first_record = records_from_this_upload[0]
                      if 'processing_method' in first_record:
                          processing_method = first_record['processing_method']
                          processing_details = first_record.get('processing_details', {})
                      else:
                          # Default to native processing if no method specified
                          processing_method = 'native_csv'
                          processing_details = {
                              'method': 'Native CSV Processing',
                              'description': 'Fast, lightweight processing using Python built-in CSV module',
                              'features': ['Basic validation', 'Email uniqueness checking', 'Duplicate prevention'],
                              'performance': 'Fast cold start, efficient for simple data'
                          }
                  
                  # Update response data with final results
                  response_data.update({
                      'processed': True,
                      'success': success,
                      's3_key': s3_key,
                      'status': status,
                      'records_processed': records_processed,
                      'total_records': records_processed,
                      'successful_records': records_processed if success else 0,
                      'error_records': 0 if success else records_processed,
                      'processing_method': processing_method,
                      'processing_details': processing_details,
                      'errors': [] if success else ['File processing failed']
                  })
                  
                  # Mark all stages as completed if processing is done
                  if success:
                      response_data['processing_stages']['complete'] = 'completed'
                      if detailed:
                          response_data['status_updates'].append({
                              'type': 'success',
                              'message': f'‚úÖ Processing complete! {records_processed} records processed successfully'
                          })
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps(response_data)
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
          
          def handle_glue_upload(event):
              try:
                  import json
                  import boto3
                  import os
                  import base64
                  import hashlib
                  from datetime import datetime
                  import uuid
                  
                  # Parse request body
                  body = event.get('body', '{}')
                  if event.get('isBase64Encoded', False):
                      body = base64.b64decode(body).decode('utf-8')
                  
                  data = json.loads(body)
                  csv_data = data.get('csv_data', '')
                  filename = data.get('filename', f'upload_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
                  
                  if not csv_data:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'No CSV data provided'})
                      }
                  
                  # Decode base64 CSV data
                  try:
                      csv_content = base64.b64decode(csv_data).decode('utf-8')
                  except Exception as e:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': f'Invalid CSV data: {str(e)}'})
                      }
                  
                  # Generate file hash
                  file_hash = hashlib.md5(csv_content.encode()).hexdigest()
                  
                  # Upload to S3
                  s3 = boto3.client('s3')
                  bucket_name = f'foreman-{os.environ.get("ENVIRONMENT", "dev")}-csv-uploads'
                  s3_key = filename
                  
                  s3.put_object(
                      Bucket=bucket_name,
                      Key=s3_key,
                      Body=csv_content,
                      ContentType='text/csv'
                  )
                  
                  # Start Glue job (with error handling for concurrent runs)
                  glue = boto3.client('glue')
                  job_name = f"foreman-{os.environ.get('ENVIRONMENT', 'dev')}-csv-processing-job"
                  
                  # Generate unique job run ID
                  job_run_id = str(uuid.uuid4())
                  
                  try:
                      response = glue.start_job_run(
                          JobName=job_name,
                          Arguments={
                              '--s3_bucket': bucket_name,
                              '--s3_key': s3_key,
                              '--job_run_id': job_run_id
                          }
                      )
                      job_run_id = response['JobRunId']
                  except Exception as glue_error:
                      if 'ConcurrentRunsExceededException' in str(glue_error):
                          # Glue job is busy, but file is uploaded successfully
                          job_run_id = f"pending_{job_run_id}"
                      else:
                          raise glue_error
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'success': True,
                          'message': 'File uploaded successfully' + (' and Glue job started' if not job_run_id.startswith('pending_') else ' (Glue job will process when available)'),
                          'job_run_id': job_run_id,
                          'filename': filename,
                          'file_hash': file_hash,
                          'processing_method': 'glue_pandas',
                          'processing_details': {
                              'method': 'AWS Glue with Pandas',
                              'description': 'Serverless ETL processing with pandas and numpy',
                              'features': ['Full pandas support', 'Large file handling', 'Scalable processing'],
                              'performance': 'Optimized for data processing workloads'
                          }
                      })
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': f'Processing error: {str(e)}'})
                  }
      
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt WebApiRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          S3_BUCKET: 'foreman-dev-csv-uploads'

  # IAM Role for Web API Lambda
  WebApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-web-api-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListObjectsV2
                Resource: 'arn:aws:s3:::foreman-dev-csv-uploads/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: 'arn:aws:dynamodb:us-east-1:631138567000:table/foreman-dev-customers'
        - PolicyName: GlueAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartJobRun
                  - glue:GetJobRun
                  - glue:GetJobRuns
                Resource: !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/foreman-${Environment}-csv-processing-job'

  # API Gateway
  WebApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-web-api'
      Description: 'Foreman Web API'

  # API Gateway Method for GET
  WebApiMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for POST
  WebApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Resource for /check-status
  WebApiCheckStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebApiGateway
      ParentId: !GetAtt WebApiGateway.RootResourceId
      PathPart: check-status

  # API Gateway Method for POST /check-status
  WebApiCheckStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !Ref WebApiCheckStatusResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'



  # API Gateway Method for HEAD
  WebApiMethodHead:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: HEAD
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for OPTIONS (CORS)
  WebApiMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # API Gateway Proxy Resource for catch-all
  WebApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebApiGateway
      ParentId: !GetAtt WebApiGateway.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method for proxy (catch-all)
  WebApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !Ref WebApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  WebApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebApiGateway}/*/*'

  # API Gateway Deployment
  WebApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WebApiMethodGet
      - WebApiMethodPost
      - WebApiCheckStatusMethod
      - WebApiMethodHead
      - WebApiMethodOptions
      - WebApiProxyMethod
    Properties:
      RestApiId: !Ref WebApiGateway
      StageName: prod
      Description: !Sub 'Deployment for ${ProjectName}-${Environment}'

Outputs:
  WebApiUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${WebApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-web-api-url' 