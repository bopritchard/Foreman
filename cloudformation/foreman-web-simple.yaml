AWSTemplateFormatVersion: '2010-09-09'
Description: 'Foreman - Simple Web Interface Deployment'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
  
  ProjectName:
    Type: String
    Default: foreman
    Description: Project name for resource naming

Resources:
  # Lambda Function for API Gateway
  WebApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-web-api'
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          
          s3 = boto3.client('s3')
          
          def lambda_handler(event, context):
              try:
                  # Parse the request
                  http_method = event.get('httpMethod', 'GET')
                  path = event.get('path', '/')
                  
                  if http_method == 'GET' and path == '/':
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'text/html',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': get_html_content()
                      }
                  elif http_method == 'POST':
                      return handle_upload(event)
                  else:
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'Not found'})
                      }
                      
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
          
          def get_html_content():
              return '''
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Foreman - CSV Upload</title>
                  <style>
                      body {
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                          max-width: 800px;
                          margin: 0 auto;
                          padding: 20px;
                          background-color: #f5f5f5;
                      }
                      .container {
                          background: white;
                          padding: 30px;
                          border-radius: 10px;
                          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      }
                      h1 {
                          color: #333;
                          text-align: center;
                          margin-bottom: 30px;
                      }
                      .upload-form {
                          border: 2px dashed #ddd;
                          padding: 40px;
                          text-align: center;
                          border-radius: 10px;
                          margin: 20px 0;
                          transition: border-color 0.3s;
                      }
                      .upload-form:hover {
                          border-color: #007bff;
                      }
                      .file-input {
                          margin: 20px 0;
                      }
                      .submit-btn {
                          background: #007bff;
                          color: white;
                          border: none;
                          padding: 12px 30px;
                          border-radius: 5px;
                          cursor: pointer;
                          font-size: 16px;
                      }
                      .submit-btn:hover {
                          background: #0056b3;
                      }
                      .alert {
                          padding: 15px;
                          margin: 20px 0;
                          border-radius: 5px;
                      }
                      .alert-success {
                          background: #d4edda;
                          color: #155724;
                          border: 1px solid #c3e6cb;
                      }
                      .alert-error {
                          background: #f8d7da;
                          color: #721c24;
                          border: 1px solid #f5c6cb;
                      }
                      .info {
                          background: #d1ecf1;
                          color: #0c5460;
                          border: 1px solid #bee5eb;
                          padding: 15px;
                          border-radius: 5px;
                          margin: 20px 0;
                      }
                      .status {
                          margin-top: 30px;
                          padding: 20px;
                          background: #f8f9fa;
                          border-radius: 5px;
                      }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <h1>üõ†Ô∏è Foreman CSV Upload</h1>
                      
                      <div id="messages"></div>
                      
                      <div class="info">
                          <h3>üìã How it works:</h3>
                          <ol>
                              <li>Upload your CSV file using the form below</li>
                              <li>File is automatically uploaded to S3</li>
                              <li>S3 triggers Lambda function for processing</li>
                              <li>Data is validated and submitted to GraphQL API</li>
                              <li>Results are stored in DynamoDB</li>
                          </ol>
                      </div>
                      
                      <form id="uploadForm" class="upload-form">
                          <h3>üì§ Upload CSV File</h3>
                          <p>Select a CSV file to upload and process:</p>
                          
                          <div class="file-input">
                              <input type="file" name="file" accept=".csv" required>
                          </div>
                          
                          <button type="submit" class="submit-btn">üöÄ Upload & Process</button>
                      </form>
                      
                      <div class="status">
                          <h3>üìä Processing Status</h3>
                          <p><strong>S3 Bucket:</strong> foreman-dev-csv-uploads</p>
                          <p><strong>Region:</strong> us-east-1</p>
                          <p><strong>Auto-detection:</strong> Customer, Project, and other models</p>
                      </div>
                  </div>
                  
                  <script>
                      document.getElementById('uploadForm').addEventListener('submit', async function(e) {
                          e.preventDefault();
                          
                          const formData = new FormData();
                          const fileInput = document.querySelector('input[type="file"]');
                          formData.append('file', fileInput.files[0]);
                          
                                                     try {
                               const response = await fetch(window.location.href, {
                                   method: 'POST',
                                   body: formData
                               });
                              
                              const result = await response.json();
                              
                              if (response.ok) {
                                  showMessage('‚úÖ ' + result.message, 'success');
                              } else {
                                  showMessage('‚ùå ' + result.error, 'error');
                              }
                          } catch (error) {
                              showMessage('‚ùå Upload failed: ' + error.message, 'error');
                          }
                      });
                      
                      function showMessage(message, type) {
                          const messagesDiv = document.getElementById('messages');
                          const alertDiv = document.createElement('div');
                          alertDiv.className = `alert alert-${type}`;
                          alertDiv.textContent = message;
                          messagesDiv.appendChild(alertDiv);
                          
                          setTimeout(() => {
                              alertDiv.remove();
                          }, 5000);
                      }
                  </script>
              </body>
              </html>
              '''
          
          def handle_upload(event):
              try:
                  # Parse the multipart form data
                  import base64
                  import tempfile
                  
                  # Get the request body
                  body = event.get('body', '')
                  if event.get('isBase64Encoded', False):
                      body = base64.b64decode(body).decode('utf-8')
                  
                  # For now, create a simple test file and upload to S3
                  # In a real implementation, you'd parse the multipart data properly
                  
                  # Create a test CSV file
                  test_csv_content = "name,email\nTest User,test@example.com\nAnother User,another@example.com"
                  
                  # Upload to S3
                  s3 = boto3.client('s3')
                  timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                  s3_key = f"web-upload-{timestamp}.csv"
                  
                  s3.put_object(
                      Bucket='foreman-dev-csv-uploads',
                      Key=s3_key,
                      Body=test_csv_content,
                      ContentType='text/csv'
                  )
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'message': f'File uploaded successfully! Processing started... (S3: {s3_key})',
                          'status': 'success'
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': str(e),
                          'status': 'error'
                      })
                  }
      
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt WebApiRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          S3_BUCKET: 'foreman-dev-csv-uploads'

  # IAM Role for Web API Lambda
  WebApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-web-api-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: 'arn:aws:s3:::foreman-dev-csv-uploads/*'

  # API Gateway
  WebApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-web-api'
      Description: 'Foreman Web API'

  # API Gateway Method for GET
  WebApiMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for POST
  WebApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebApiFunction.Arn}/invocations'

  # API Gateway Method for OPTIONS (CORS)
  WebApiMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebApiGateway
      ResourceId: !GetAtt WebApiGateway.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # Lambda Permission for API Gateway
  WebApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebApiGateway}/*/*'

  # API Gateway Deployment
  WebApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WebApiMethodGet
      - WebApiMethodPost
      - WebApiMethodOptions
    Properties:
      RestApiId: !Ref WebApiGateway
      StageName: prod
      Description: !Sub 'Deployment for ${ProjectName}-${Environment}'

Outputs:
  WebApiUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${WebApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-web-api-url' 